/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EvaluatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bytes32ToString"
      | "ex1_claimedPoints"
      | "ex2_claimedFromContract"
      | "ex3_withdrawFromContract"
      | "ex4_approvedExerciceSolution"
      | "ex5_revokedExerciceSolution"
      | "ex6_depositTokens"
      | "ex7_createERC20"
      | "ex8_depositAndMint"
      | "ex9_withdrawAndBurn"
      | "exerciceProgression"
      | "hasBeenPaired"
      | "nextValueStoreRank"
      | "studentExerciceSolution"
      | "submitExercice"
      | "teachers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "constructedCorrectly" | "newRandomTickerAndSupply"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bytes32ToString",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ex1_claimedPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ex2_claimedFromContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ex3_withdrawFromContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ex4_approvedExerciceSolution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ex5_revokedExerciceSolution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ex6_depositTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ex7_createERC20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ex8_depositAndMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ex9_withdrawAndBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exerciceProgression",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasBeenPaired",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextValueStoreRank",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "studentExerciceSolution",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitExercice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "teachers",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "bytes32ToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ex1_claimedPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ex2_claimedFromContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ex3_withdrawFromContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ex4_approvedExerciceSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ex5_revokedExerciceSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ex6_depositTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ex7_createERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ex8_depositAndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ex9_withdrawAndBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exerciceProgression",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasBeenPaired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextValueStoreRank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "studentExerciceSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitExercice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teachers", data: BytesLike): Result;
}

export namespace constructedCorrectlyEvent {
  export type InputTuple = [
    erc20Address: AddressLike,
    claimableERC20Address: AddressLike
  ];
  export type OutputTuple = [
    erc20Address: string,
    claimableERC20Address: string
  ];
  export interface OutputObject {
    erc20Address: string;
    claimableERC20Address: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace newRandomTickerAndSupplyEvent {
  export type InputTuple = [ticker: string, supply: BigNumberish];
  export type OutputTuple = [ticker: string, supply: bigint];
  export interface OutputObject {
    ticker: string;
    supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Evaluator extends BaseContract {
  connect(runner?: ContractRunner | null): Evaluator;
  waitForDeployment(): Promise<this>;

  interface: EvaluatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bytes32ToString: TypedContractMethod<[_bytes32: BytesLike], [string], "view">;

  ex1_claimedPoints: TypedContractMethod<[], [void], "nonpayable">;

  ex2_claimedFromContract: TypedContractMethod<[], [void], "nonpayable">;

  ex3_withdrawFromContract: TypedContractMethod<[], [void], "nonpayable">;

  ex4_approvedExerciceSolution: TypedContractMethod<[], [void], "nonpayable">;

  ex5_revokedExerciceSolution: TypedContractMethod<[], [void], "nonpayable">;

  ex6_depositTokens: TypedContractMethod<[], [void], "nonpayable">;

  ex7_createERC20: TypedContractMethod<[], [void], "nonpayable">;

  ex8_depositAndMint: TypedContractMethod<[], [void], "nonpayable">;

  ex9_withdrawAndBurn: TypedContractMethod<[], [void], "nonpayable">;

  exerciceProgression: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  hasBeenPaired: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  nextValueStoreRank: TypedContractMethod<[], [bigint], "view">;

  studentExerciceSolution: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  submitExercice: TypedContractMethod<
    [studentExercice: AddressLike],
    [void],
    "nonpayable"
  >;

  teachers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bytes32ToString"
  ): TypedContractMethod<[_bytes32: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "ex1_claimedPoints"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ex2_claimedFromContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ex3_withdrawFromContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ex4_approvedExerciceSolution"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ex5_revokedExerciceSolution"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ex6_depositTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ex7_createERC20"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ex8_depositAndMint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ex9_withdrawAndBurn"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exerciceProgression"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasBeenPaired"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextValueStoreRank"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "studentExerciceSolution"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "submitExercice"
  ): TypedContractMethod<[studentExercice: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "teachers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "constructedCorrectly"
  ): TypedContractEvent<
    constructedCorrectlyEvent.InputTuple,
    constructedCorrectlyEvent.OutputTuple,
    constructedCorrectlyEvent.OutputObject
  >;
  getEvent(
    key: "newRandomTickerAndSupply"
  ): TypedContractEvent<
    newRandomTickerAndSupplyEvent.InputTuple,
    newRandomTickerAndSupplyEvent.OutputTuple,
    newRandomTickerAndSupplyEvent.OutputObject
  >;

  filters: {
    "constructedCorrectly(address,address)": TypedContractEvent<
      constructedCorrectlyEvent.InputTuple,
      constructedCorrectlyEvent.OutputTuple,
      constructedCorrectlyEvent.OutputObject
    >;
    constructedCorrectly: TypedContractEvent<
      constructedCorrectlyEvent.InputTuple,
      constructedCorrectlyEvent.OutputTuple,
      constructedCorrectlyEvent.OutputObject
    >;

    "newRandomTickerAndSupply(string,uint256)": TypedContractEvent<
      newRandomTickerAndSupplyEvent.InputTuple,
      newRandomTickerAndSupplyEvent.OutputTuple,
      newRandomTickerAndSupplyEvent.OutputObject
    >;
    newRandomTickerAndSupply: TypedContractEvent<
      newRandomTickerAndSupplyEvent.InputTuple,
      newRandomTickerAndSupplyEvent.OutputTuple,
      newRandomTickerAndSupplyEvent.OutputObject
    >;
  };
}
